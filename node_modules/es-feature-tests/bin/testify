#!/usr/bin/env node

"use strict";

// Minified from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(a){"use strict";if(void 0===a||null===a)throw new TypeError("Cannot convert first argument to object");for(var c=Object(a),d=1;d<arguments.length;d++){var e=arguments[d];if(void 0!==e&&null!==e){e=Object(e);for(var f=Object.keys(Object(e)),g=0,h=f.length;h>g;g++){var i=f[g],j=Object.getOwnPropertyDescriptor(e,i);void 0!==j&&j.enumerable&&(c[i]=e[i])}}}return c}});

var fs = require("fs"),
	os = require("os"),
	path = require("path"),
	stdin = require("get-stdin"),
	args = require("minimist")(process.argv,{
		boolean: [ "recursive", "ignore-missing", "ignore-invalid", "input" ],
		string: [ "file", "dir", "enable", "disable", "exclude", "output" ],
		default: {
			"recursive": false,
			"ignore-missing": false,
			"ignore-invalid": false,
			"enable": [],
			"disable": [],
			"exclude": [],
			"output": "simple"
		},
		alias: {
			"recursive": "R",
			"ignore-missing": "M",
			"ignore-invalid": "I",
			"input": "C"
		}
	}),
	// include lib
	testify = require(path.join(__dirname,"..","testify"))
;

main();

// ***********************************

function printHelp() {
	console.log(
		"testify: scan for ES6+ features that need tests\n",
		"(c) 2015 Kyle Simpson | http://getify.mit-license.org/\n",
		"\n",
		"usage: testify [--file|--dir]=path [opt ...]\n",
		"\n",
		"options:\n",
		"--help                    show this help\n",
		"\n",
		"--file=file               scan a single file\n",
		"--dir=directory           scan all files in a directory\n",
		"--exclude=pattern         exclude any included paths that match pattern (JS regex)\n",
		"-C, --input               scan file contents from STDIN\n",
		"\n",
		"--output=[simple|json|babel|traceur]\n",
		"                          control output format (see docs)\n",
		"                          (default: simple)\n",
		"--enable=test-name        force inclusion of a test by name\n",
		"--disable=test-name       force exclusion of a test by name\n",
		"\n",
		"-R, --recursive           directory scan is recursive\n",
		"                          (default: off)\n",
		"-M, --ignore-missing      ignore missing dependency files\n",
		"                          (default: off)\n",
		"-I, --ignore-invalid      ignore JS parsing issues\n",
		"                          (default: off)\n"
	);
}

function validateParams() {
	if (args.help) {
		QUIT();
	}
	else if (!(
			"file" in args ||
			"dir" in args ||
			args.input
	)) {
		QUIT("Required: '--file', '--dir', or '--input (-C)'");
	}
	else if (
		args.file != null &&
		(
			args.file === "" ||
			(
				typeof args.file != "string" &&
				!Array.isArray(args.file)
			) ||
			(
				Array.isArray(args.file) &&
				~args.file.indexOf("")
			)
		)
	) {
		QUIT("Each '--file' must specify a non-empty value");
	}
	else if (
		args.dir != null &&
		(
			args.dir === "" ||
			(
				typeof args.dir != "string" &&
				!Array.isArray(args.dir)
			) ||
			(
				Array.isArray(args.dir) &&
				~args.dir.indexOf("")
			)
		)
	) {
		QUIT("Each '--dir' must specify a non-empty value");
	}
	else if (
		args.exclude != null &&
		(
			args.exclude === "" ||
			(
				typeof args.exclude != "string" &&
				!Array.isArray(args.exclude)
			) ||
			(
				Array.isArray(args.exclude) &&
				~args.exclude.indexOf("")
			)
		)
	) {
		QUIT("Each '--exclude' must specify a non-empty value");
	}
	else if (
		args.output &&
		!~(["simple","json","babel","traceur"]).indexOf(args.output)
	) {
		QUIT("'--output' must be included only once and be one of: 'simple', 'json', 'babel', or 'traceur'");
	}
	else if (
		args.enable != null &&
		(
			args.enable === "" ||
			(
				typeof args.enable != "string" &&
				!Array.isArray(args.enable)
			) ||
			(
				Array.isArray(args.enable) &&
				~args.enable.indexOf("")
			)
		)
	) {
		QUIT("Each '--enable' must specify a non-empty value");
	}
	else if (
		args.disable != null &&
		(
			args.disable === "" ||
			(
				typeof args.disable != "string" &&
				!Array.isArray(args.disable)
			) ||
			(
				Array.isArray(args.disable) &&
				~args.disable.indexOf("")
			)
		)
	) {
		QUIT("Each '--disable' must specify a non-empty value");
	}
	else if (
		"input" in args &&
		typeof args.input != "boolean"
	) {
		QUIT("'--input (-C)' must have no value");
	}
	else if (
		"recursive" in args &&
		typeof args.recursive != "boolean"
	) {
		QUIT("'--recursive (-R)' must have no value");
	}
	else if (
		"ignore-missing" in args &&
		typeof args["ignore-missing"] != "boolean"
	) {
		QUIT("'--ignore-missing (-M)' must have no value");
	}
	else if (
		"ignore-invalid" in args &&
		typeof args["ignore-invalid"] != "boolean"
	) {
		QUIT("'--ignore-invalid (-I)' must have no value");
	}
}

function processParams(ready) {
	// verify CLI usage
	validateParams();

	if (args.input) {
		stdin(function read(data){
			data = data.trim();
			if (!data) {
				QUIT("Required: '--input (-C)' specified, but STDIN was empty");
			}

			args.input = data;
			ready();
		});
	}
	else {
		args.input = null;
		ready();
	}
}

function QUIT(fatal,hideHelp) {
	if (fatal) {
		console.error("testify:",fatal);
		console.error("");
	}
	if (!hideHelp) {
		printHelp();
	}
	process.exit(fatal ? 1 : 0);
}

function main() {
	processParams(function ready(){
		var output;

		try {
			// set options from params
			output = testify.scan({
				files: args.file,
				dirs: args.dir,
				excludes: args.exclude,
				output: args.output,
				content: args.input,
				enabled: args.enable,
				disabled: args.disable,
				recursive: args.recursive,

				ignore: {
					missing: args["ignore-missing"],
					invalid: args["ignore-invalid"]
				}
			});

			if (typeof output != "string") output = JSON.stringify(output);

			process.stdout.write(output);
		}
		catch (err) {
			QUIT(err.message);
		}
	});
}
